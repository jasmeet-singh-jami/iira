services:
  frontend:
    build:
      context: ./iira-frontend
    image: iira/iira-frontend:2.0
    container_name: react-frontend
    ports:
      # Map the local port 3000 to the container's port 80 (where Nginx is running)
      - "3000:80"

  backend:
    build:
      context: .                          
      dockerfile: iira-backend/Dockerfile 
    image: iira/iira-backend:2.0
    container_name: python-backend
    ports:
      - "8000:8000"
    env_file:
      - ./iira-backend/.env.docker

  postgres:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: iira
    ports:
      - "5433:5432" # avoid conflict with local Postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  qdrant:
    image: qdrant/qdrant:v1.15.0
    container_name: qdrant-db
    restart: always
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage

  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: ollama
  #   restart: unless-stopped
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_models:/root/.ollama
  #   entrypoint: >
  #     sh -c "
  #       ollama serve &
  #       echo 'Waiting for Ollama...' &&
  #       until ollama status > /dev/null 2>&1; do sleep 2; done &&
  #       if ! ollama list | grep -q llama3:latest; then
  #         echo 'Pulling llama3:latest...' && ollama pull llama3:latest;
  #       fi &&
  #       wait -n
  #     "

volumes:
  postgres_data:
  qdrant_storage:
  # ollama_models: